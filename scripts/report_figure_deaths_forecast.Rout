
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##===============================#
> ## Plot deaths for forecast
> ## FRED-COVID19
> ## Author: Guido España
> ## 2020
> ##===============================#
> ## Setup-------------
> ##===============================#
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.0     ✔ purrr   0.3.4
✔ tibble  3.0.1     ✔ stringr 1.4.0
✔ tidyr   1.0.2     ✔ forcats 0.5.0
✔ readr   1.3.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(RColorBrewer)
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:dplyr’:

    intersect, setdiff, union

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> 
> ##===============================#
> ## Data from NYT or JHU------------
> ##===============================#
> interventions_df = read_csv('../../experiments/input_files/interventions_covid_timeseries.csv') %>%
+     filter(State != 'NY')
Parsed with column specification:
cols(
  State = col_character(),
  School_closure = col_date(format = ""),
  Shelter_in_place = col_date(format = ""),
  state_name = col_character(),
  end_shelter_date = col_date(format = ""),
  early_rate = col_double()
)
> 
> data_source = "JHU"
> data_sys = system(sprintf("Rscript ./download_covid_data.R %s", data_source), intern = TRUE)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.0     ✔ purrr   0.3.4
✔ tibble  3.0.1     ✔ dplyr   0.8.5
✔ tidyr   1.0.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

Attaching package: ‘lubridate’

The following objects are masked from ‘package:dplyr’:

    intersect, setdiff, union

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

trying URL 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv'
Content type 'text/plain; charset=utf-8' length 105807 bytes (103 KB)
==================================================
downloaded 103 KB

trying URL 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv'
Content type 'text/plain; charset=utf-8' length 1074886 bytes (1.0 MB)
==================================================
downloaded 1.0 MB

trying URL 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv'
Content type 'text/plain; charset=utf-8' length 1025000 bytes (1000 KB)
==================================================
downloaded 1000 KB

Parsed with column specification:
cols(
  date = col_date(format = ""),
  state = col_character(),
  fips = col_character(),
  cases = col_double(),
  deaths = col_double()
)
Parsed with column specification:
cols(
  .default = col_double(),
  iso2 = col_character(),
  iso3 = col_character(),
  Admin2 = col_character(),
  Province_State = col_character(),
  Country_Region = col_character(),
  Combined_Key = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  iso2 = col_character(),
  iso3 = col_character(),
  Admin2 = col_character(),
  Province_State = col_character(),
  Country_Region = col_character(),
  Combined_Key = col_character()
)
See spec(...) for full column specifications.
Joining, by = c("state", "date")
Joining, by = "state"
> 
> if(!is.null(attr(data_sys, "status"))){
+     stop("Something went wrong with downloading incidence data\n")
+ }
> 
> if(!file.exists('../../data/US_states_covid_data.csv')){
+     stop("Something went wrong with downloading incidence data\n")
+ }
> us_states_temp = read_csv('../../data/US_states_covid_data.csv')
Parsed with column specification:
cols(
  state = col_character(),
  date = col_date(format = ""),
  cases = col_double(),
  deaths = col_double(),
  fips = col_character()
)
> 
> us_states = us_states_temp %>%
+     filter(state %in% interventions_df$state_name) %>%
+     left_join(interventions_df, by = c("state" = "state_name")) %>%
+     group_by(State) %>%
+     mutate(cases_inc = c(cases[1], diff(cases)),
+            deaths_inc = c(deaths[1], diff(deaths))) %>%
+     ungroup()
> 
> fit_data = read_csv('../../experiments/Midwest_simulations/output/CALIBRATION/US_states_covid_data.csv') %>%
+     filter(state %in% interventions_df$state_name) %>%
+     left_join(interventions_df, by = c("state" =  "state_name")) %>%
+     group_by(State) %>%
+     mutate(cases_inc = c(cases[1], diff(cases)),
+            deaths_inc = c(deaths[1], diff(deaths))) %>%
+     ungroup()
Parsed with column specification:
cols(
  state = col_character(),
  date = col_date(format = ""),
  cases = col_double(),
  deaths = col_double(),
  fips = col_character()
)
> 
> ##===============================#
> ## Process output-------------
> ##===============================#
> outdir = '../../experiments/Midwest_simulations/output/SHORT_FORECAST'
> fred_sweep_df = tibble()
> params_sweep_df = tibble()
> 
> for(nn in 1:nrow(interventions_df)){    
+     outdir_st = file.path(outdir, sprintf('FRED_%s_short_forecast_asymp_out', interventions_df$State[nn]))
+     data_out = file.path(outdir_st,'fred_output.csv')
+ 
+     params_out = file.path(outdir_st, 'FRED_parameters_out.csv')
+     params_df = read_csv(params_out)
+     tmp_sweep_df = read_csv(data_out) %>%
+         right_join(params_df, by = c("job_id" = "job_id")) %>%
+         mutate(Date = as.Date("2020-01-01") + Day)    
+     fred_sweep_df = bind_rows(fred_sweep_df, tmp_sweep_df)
+     params_sweep_df = bind_rows(params_sweep_df,params_df)
+ }
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  start_date = col_date(format = ""),
  primary_cases_file = col_character(),
  school_closure_policy = col_character(),
  intervention_name = col_character(),
  job_id = col_character(),
  params_file = col_character(),
  state_name = col_character(),
  advance_seeding = col_character()
)
See spec(...) for full column specifications.
Parsed with column specification:
cols(
  .default = col_double(),
  job_id = col_character()
)
See spec(...) for full column specifications.
> 
> fred_sweep_df = fred_sweep_df %>% group_by(seed,state_name) %>% mutate(CumCF = cumsum(CF_mean)) %>% ungroup()
> 
> ##===============================#
> ## PLOT Deaths by state --------
> ##===============================
> col_palette = brewer.pal(n = 7, name='Dark2')
> jpeg('../figures/report_figure_deaths_forecast.jpeg', width=7,height=5, units="in", res = 300)
> par(mar = c(3,2,3,1), oma = c(4,4,0,1))
> layout(matrix(c(1,1,2,2,3,3,4,4,8,5,5,6,6,7,7,8),nrow = 2, byrow = T))
> particles_sampled_df = tibble()
> times_to_plot = seq(from=as.Date('2020-02-06'),to=as.Date('2020-06-15'), by = 1)
> x_inds = seq(from=times_to_plot[1],to=times_to_plot[length(times_to_plot)],length.out = 8)
> xlab_str = gsub(" +", " ", format(x_inds, "%b %e"))
> 
> for(nn in 1:nrow(interventions_df)){
+     ss = interventions_df$State[nn]
+     print(ss)
+     st_intervention_tmp = filter(interventions_df, State == ss)
+     state_fred = filter(fred_sweep_df, state_name == ss)   
+     interv_sc = "ShelterAll"
+     intervention_fred = filter(state_fred, intervention_name == interv_sc )
+     intervention_end = intervention_fred$shelter_in_place_duration_mean[1] + intervention_fred$shelter_in_place_delay_mean[1]
+     
+     tmp_fred = intervention_fred %>%
+         group_by(Day, Date, start_date, school_closure_day, shelter_in_place_delay_mean) %>%
+         summarize(CF_median = quantile(CF_mean, probs = c(0.5)),
+                   CF_low = quantile(CF_mean, probs = c(0.025)), CF_high = quantile(CF_mean, probs = c(0.975)),
+                   Cs_median = quantile(Cs_mean, probs = c(0.5)),
+                   Cs_low = quantile(Cs_mean, probs = c(0.025)), Cs_high = quantile(CF_mean, probs = c(0.975)),
+                   AR_low = quantile(AR_mean, probs = c(0.025)), AR_high = quantile(AR_mean, probs = c(0.975)),
+                   AR_median = quantile(AR_mean, probs = c(0.5))) %>%
+         ungroup()
+ 
+     plot(tmp_fred$Date, tmp_fred$CF_median, xaxs = "i", yaxs = "i", type = "l", lwd = 2, col = "#00000090",
+          xlab = "", ylab = "", xlim = c(times_to_plot[1],times_to_plot[length(times_to_plot)]),
+          ylim = c(0,max(intervention_fred$CF_mean)), xaxt = 'n', yaxt = 'n')
+     mtext(side = 3, text = ss)
+     axis(side = 2, las = 2, at = seq(0, max(intervention_fred$CF_mean), length.out = 6),
+          labels = signif(round(seq(0, max(intervention_fred$CF_mean), length.out = 6)), 2))
+ 
+     abline(v = as.Date(tmp_fred$start_date[1] + tmp_fred$school_closure_day[1] ), lty = 2, col = "navy", lwd = 1.5)
+     abline(v = as.Date(tmp_fred$start_date[1] + tmp_fred$shelter_in_place_delay_mean[1]), lty = 3, col = "navy", lwd = 1.5)
+     
+     polygon(x = c(tmp_fred$Date, rev(tmp_fred$Date)),
+             y = c(tmp_fred$CF_high,
+                     rev(tmp_fred$CF_low)),
+             border = adjustcolor('black', alpha.f = 0.7),
+             col = adjustcolor('black', alpha.f = 0.2))    
+     lines(tmp_fred$Date, tmp_fred$CF_median, lwd = 1.5, 
+           col = adjustcolor('black', alpha.f = 0.2)) 
+ 
+     tmp_data_fit = filter(fit_data, State == ss)
+     tmp_fred_data = filter(tmp_fred, Date <= max(tmp_data_fit$date))
+     
+     interv_sc = "Shelter_0"
+     intervention_fred = filter(state_fred, intervention_name == interv_sc) %>%
+         filter(Date >= times_to_plot[1], Date <= times_to_plot[length(times_to_plot)])
+ 
+     intervention_end = intervention_fred$shelter_in_place_duration_mean[1] + intervention_fred$shelter_in_place_delay_mean[1]
+     
+     
+     tmp_fred = intervention_fred %>%
+         group_by(Day, Date, start_date, school_closure_day, shelter_in_place_delay_mean) %>%
+         summarize(CF_median = quantile(CF_mean, probs = c(0.5)), CF_low = quantile(CF_mean, probs = c(0.025)), CF_high = quantile(CF_mean, probs = c(0.975))) %>%
+         ungroup()
+     
+     polygon(x = c(tmp_fred$Date, rev(tmp_fred$Date)),
+               y = c(tmp_fred$CF_high,
+                     rev(tmp_fred$CF_low)),
+             border = adjustcolor(col_palette[nn],alpha.f = 0.9),
+             col = adjustcolor(col_palette[nn],alpha.f = 0.5))
+     lines(tmp_fred$Date, tmp_fred$CF_median, lwd = 1.5, col = col_palette[nn]) 
+     
+     axis(side = 1, at = x_inds, labels = xlab_str, las = 2)        
+     abline(v = as.Date(intervention_fred$start_date[1] + intervention_end), col = "navy", lwd = 1.5)
+     
+     tmp_data = filter(us_states, State == ss,date > tmp_data_fit$date[nrow(tmp_data_fit)], date < as.Date(Sys.Date()))
+     points(tmp_data$date, tmp_data$deaths_inc, col = "navy", lwd = 0.3, pch = 9, cex = 0.8)
+     
+     points(tmp_data_fit$date, tmp_data_fit$deaths_inc, col = "navy", lwd = 0.3,pch = 18)
+ }
[1] "MI"
[1] "IL"
[1] "IN"
[1] "WI"
[1] "MN"
[1] "OH"
[1] "KY"
> 
> mtext("Deaths", side = 2, line = 2, outer = T)
> mtext("Date", side = 1, line = 2, outer = T)
> 
> dev.off()
null device 
          1 
> 
> 
> proc.time()
   user  system elapsed 
 13.838   1.046  16.993 
